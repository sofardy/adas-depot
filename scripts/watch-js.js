const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

console.log('üî• JS Watcher started - watching src/js/**/*.js');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
function runCommand(cmd) {
    return new Promise((resolve, reject) => {
        exec(cmd, (error, stdout, stderr) => {
            if (error) {
                console.error(`‚ùå Error: ${error}`);
                reject(error);
                return;
            }
            if (stdout) console.log(stdout);
            if (stderr) console.error(stderr);
            resolve();
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
function watchDirectory(dir, callback) {
    fs.watch(dir, { recursive: true }, (eventType, filename) => {
        if (filename && filename.endsWith('.js')) {
            console.log(`üìù JS file changed: ${filename}`);
            callback();
        }
    });
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π JS —Ñ–∞–π–ª–æ–≤
const jsDir = path.join(__dirname, '../src/js');
watchDirectory(jsDir, async () => {
    try {
        await runCommand('npm run build:js');
        console.log('‚úÖ JS rebuilt successfully');
    } catch (error) {
        console.error('‚ùå JS build failed');
    }
});

// –ù–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
process.stdin.resume();
